Design Document for Problem Statement 8 - Club House

---------
Overview:
---------
The solution uses a HashTable data structure (key as Applicant's name) and the following functions needs to be implemented using the HashTable.
	1.	initializeHash: Initialize an empty hash table
	2.	insertAppDetails: Inserts applicant records into the hash table
	3.	updateAppDetails: finds the applicantâ€™s details based on the name and updates the corresponding details into the hash table.
	4.	memRef: Prints the list of all members who have been referred by a particular member
	5.	appStatus: Prints the list of number of applications in each stage of the application process
	6.	destroyHash: Destroys all the entries inside hash table.

-----------------
Problem Analysis:
-----------------
	1.	Assume number of members are 'n' as it is not fixed.
	2.  Insert and Update entail updating the data structure(HashTable).
	3.	For memRef and appStatus, we chose to do a complete scan of the entire data structure. This could have been further optimised using a seperate hash table.
	
---------------
Interpretation:
---------------
	1.	An unfixed number of values (n) have to be inserted.
	2.	Optimize Hash fuction to improve performance.
	3.	No given constraints on storage (space complexity).

------------------------
Choice of Hash Function:
------------------------
	We chose the following hash function,
	
	h(n) = s[0]*31^(n - 1) + s[1]*31^(n - 2) + ... + s[n - 1]
	
	Since the key is always a string(member name), the above hash function provides a unique value for permutations of the same string.
	For example, 
		h('SPOT') != h('TOPS')
	
	Note: Java string class uses the same hash function.
	
--------------------
Handling collisions:
--------------------
Separate Chaining (using linked lists) is used to handle collisions.
	Let 'N' be the size of the hash table
	Load Factor of the hash table = n/N
	To keep the collision count low, we chose load factor = 0.5
	load_factor = 0.5 ==> N = 2*n
	
Note: Rehashing is not being done because the number of members in the input file is fixed.
	
This gives the following advantages,
	1.	Simpler implementation for this use case.
	2.	Gives scope for further optimizations by using other data structures (like BST) in place of linked lists(Buckets). 

------------------
Run Time Analysis:
------------------
	1.	A single lookup will take O(k), where k is proportional to linked list size of that hash slot.
	2.	The worst case time complexity for Insert and Update is O(n).
	3.  For memRef and appStatus, we need to traverse every entry in the HashTable. Considering 'k' as bucket size and 'N' as hash table size, the run time complexity is O(N*k).

